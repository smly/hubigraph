:set prompt "> "

-- initalize
> :m +Hubigraph
> let url = "http://localhost:20738/RPC2"
> let u x = initHubigraph url >>= runHubigraph x

-- vertex
> :t newVertexWithID
newVertexWithID :: VertexID -> Hubigraph Bool
> u $ newVertexWithID 1
> u $ mapM_ newVertexWithID [2..4]

-- edge
> :t newEdgeWithID
newEdgeWithID :: EdgeID -> Edge -> Hubigraph Bool
> u $ newEdgeWithID 1 (1,4)
> eids <- u $ mapM newEdge [(1,2), (2,3)]

-- attribution
> :t setEAttr
setEAttr :: EAttr -> EdgeID -> Hubigraph Bool
> :i EAttr 
data EAttr
  = EColor Color
  | ELabel String
  | EFontcolor Color
  | EFontfamily String
  | EFontsize Int
  | ESpline Bool
  | EStrength Float
  | EOriented Bool
  | EStroke Stroke
  | EWidth Float
  | EArrow Bool
  | EShowstrain Bool
  | EVisible Bool
        -- Defined in Hubigraph.Base
instance Attr EAttr -- Defined in Hubigraph.Base
> u $ setEAttr (EColor "#ff5050") 1

-- change styles
> :t newVStyle
newVStyle :: StyleID -> Hubigraph StyleID
> :t setVStyleAttr 
setVStyleAttr :: VAttr -> StyleID -> Hubigraph Bool
> :i VAttr 
data VAttr
  = VColor Color
  | VShape Shape
  | VShapedetail Int
  | VLabel String
  | VSize Float
  | VFontcolor Color
  | VFontfamily String
  | VFontsize Int
  | VVisible Bool
  | VCallback String
        -- Defined in Hubigraph.Base
instance Attr VAttr -- Defined in Hubigraph.Base
> sid <- u $ newVStyle 0
> u $ mapM_ (changeVStyle sid) [1..4]
> u $ setVStyleAttr (VColor "#f06060") sid
> u $ mapM_ (flip setVStyleAttr sid) [VColor "#f00060", VShape Sphere, VLabel "class 1"]

> sid' <- u $ newVStyle sid
> u $ mapM_ (changeVStyle sid') [3,4]
> u $ mapM_ (flip setVStyleAttr sid') [VColor "#00f060", VLabel "class 2"]
